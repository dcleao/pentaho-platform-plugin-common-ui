/*!
 * Copyright 2010 - 2016 Pentaho Corporation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @classDesc The `IDebugManager` interface represents a manager of the debugging level for several code contexts.
 *
 * @name IDebugManager
 * @memberOf pentaho
 * @interface
 * @see pentaho.debug
 */

/**
 * Sets the _maximum_ active debugging level, optionally for a given AMD module.
 *
 * @name setLevel
 * @memberOf pentaho.IDebugManager#
 * @method
 * @param {!pentaho.DebugLevels|string} level - The debugging level.
 * @param {!Object|string} [module] - An AMD module object, as returned by requesting the `"module"` dependency,
 * or a module id.
 * When unspecified, the default debugging level is set.
 */

/**
 * Configures the debugging manager given a specification.
 *
 * @name configure
 * @memberOf pentaho.IDebugManager#
 * @method
 * @param {object} [spec] - The debugging configuration.
 * @param {pentaho.util.DebugLevels|string} [spec.level] - The default debugging level.
 * The url debugging level, when specified, takes precedence over this.
 * When neither is specified, defaults to {@link pentaho.util.DebugLevels.error}.
 *
 * @param {Object.<string, pentaho.util.DebugLevels|string>} [spec.modules] - Debugging levels per absolute AMD module id.
 */

/**
 * Gets the _maximum_ active debugging level, optionally for a given AMD module.
 *
 * @example
 *
 * define([
 *   "module",
 *   "pentaho/debug",
 *   "pentaho/DebugLevels"
 * ], function(module, debugMgr, DebugLevels) {
 *
 *   var isDebugEnabled = debugMgr.getLevel(module) >= DebugLevels.debug;
 *
 *   // ...
 * });
 *
 * @name getLevel
 * @memberOf pentaho.IDebugManager#
 * @method
 * @param {!Object|string} [module] - An AMD module object, as returned by requesting the `"module"` dependency,
 * or a module id.
 * When unspecified, the default debugging level is returned.
 *
 * @return {!pentaho.util.DebugLevels} The debugging level.
 */

/**
 * Tests if a debugging level is active, optionally for a given AMD module.
 *
 * @example
 *
 * define([
 *   "module",
 *   pentaho/debug
 * ], function(module, debugMgr) {
 *
 *   var isDebugEnabled = debugMgr.testLevel("debug", module);
 *
 *   // ...
 * });
 *
 * @name testLevel
 * @memberOf pentaho.IDebugManager#
 * @method
 * @param {!pentaho.util.DebugLevels|string} level - The debugging level to test.
 * @param {!Object|string} [module] - An AMD module object, as returned by requesting the `"module"` dependency,
 * or a module id.
 * When unspecified, the default debugging level is used.
 *
 * @return {boolean} `true` if the given debugging level is active; `false`, otherwise.
 */

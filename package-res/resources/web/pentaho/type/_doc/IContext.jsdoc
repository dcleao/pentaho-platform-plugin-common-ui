/*!
 * Copyright 2010 - 2015 Pentaho Corporation.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The `IContext` interface represents an application context
 * which is characterized by certain variables and
 * for which own versions of type classes are kept.
 *
 * @name pentaho.type.IContext
 * @interface
 *
 * @property {string} container Gets the id of the container application.
 * @property {string} user Gets the id of the user.
 * @property {string} theme Gets the id of the theme.
 * @property {string} locale Gets the id of the locale.
 */

/**
 * Obtains the contextualized class of a given type.
 *
 * An error is thrown if the given type reference contains ids of AMD modules
 * which are not yet loaded.
 *
 * @name get
 * @memberOf pentaho.type.IContext
 * @type function
 * @param {pentaho.type.spec.UTypeRef} typeRef A reference of the desired type.
 * @return {Class.<pentaho.type.Value>} The corresponding type class.
 */

/**
 * Obtains a promise for the contextualized class of a given type.
 *
 * @name getAsync
 * @memberOf pentaho.type.IContext
 * @type function
 * @param {pentaho.type.spec.UTypeRef} typeRef typeRef A reference of the desired type.
 * @return {Promise.<Class.<pentaho.type.Value>>} A promise for the corresponding type class.
 */
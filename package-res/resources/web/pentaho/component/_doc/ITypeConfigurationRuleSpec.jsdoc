/*!
 * Copyright 2010 - 2015 Pentaho Corporation.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @name pentaho.component.ITypeConfigurationRuleSpec
 *
 * @interface
 *
 * @description The `ITypeConfigurationRuleSpec` interface represents a
 * configuration rule that controls the scope of application of a given type configuration.
 *
 * The properties {@link pentaho.component.ITypeConfigurationRuleSpec#id}
 * and {@link pentaho.component.ITypeConfigurationRuleSpec#context}
 * determine the &lt;component type, context&gt; pairs that a
 * configuration applies to.
 *
 * The property {@link pentaho.component.ITypeConfigurationRuleSpec#priority}
 * affects the order of application of rules.
 *
 * The property {@link pentaho.component.ITypeConfigurationRuleSpec#config}
 * contains the rule's actual component type configuration.
 * This type can be used _generically_, having as argument the type of configuration it can have.
 * For example: {@link pentaho.component.ITypeConfigurationRuleSpec.<pentaho.component.ITypeConfigurationSpec>}.
 *
 * ### Configuration Rules Precedence
 *
 * When more than one configuration rules applies to a component type,
 * these are applied in reverse order (last wins) of the following precedence rules:
 *
 * 1. {@link pentaho.component.ITypeConfigurationSpec#priority} property, from greater to lower values.
 * 2. First _Individual_ then _Group_ configurations — see {@link pentaho.component.ITypeConfigurationSpec#id}.
 * 3. Configuration rules applicable to the component type,
 *    and all applicable to each of its base component types,
 *    from more specific to more abstract.
 * 4. Inverse document order — last in registration order has higher precedence.
 *
 * Note that for the configuration rules that are automatically loaded by the {@link pentaho.component.registry},
 * by using the {@link pentaho.service} AMD plugin, their relative order is actually undefined.
 *
 * @see pentaho.component.TypeConfigurationRuleSpec
 * @see pentaho.component.ITypeSpec
 */

/**
 * Id or id pattern, or an array of such, of the component types
 * that the rule applies to.
 *
 * When unspecified, it applies to **all** component types.
 * Otherwise, when an array, it applies to the union of the component types
 * that each entry applies to.
 *
 * When a string is specified, it applies only to a component type having
 * that exact id and constitutes an **individual configuration**.
 *
 * When a regular expression object is specified,
 * it applies to every component type whose id matches it,
 * and constitutes a **group configuration**.
 *
 * See [RegExp]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/RegExp}
 * for more information on the JavaScript's regular expression syntax.
 *
 * @example
 * // a single component type
 * "pentaho/visual/ccc/bar"
 *
 * // all "pentaho" component types
 * /^pentaho\//
 *
 * // all of the "twelve days of big data visualizations" plugin
 * // visualization components
 * /^twelveDaysViz\//
 *
 * // all component types
 * null
 *
 * // CDF's input and select components
 * ["cdf/component/input", "cdf/component/select"]
 *
 * @name pentaho.component.ITypeConfigurationRuleSpec#id
 * @type string | RegExp | Array.<(string|RegExp)>
 */

/**
 * Id, or array of ids, of the contexts that the rule applies to.
 *
 * When unspecified, applies to **all** contexts.
 * Otherwise, when an array, it applies to the union of the contexts
 * that each of the entries applies to.
 *
 * @example
 * // Analyzer
 * "analyzer"
 *
 * // Analyzer and CDF
 * ["analyzer", "cdf"]
 *
 * @name pentaho.component.ITypeConfigurationRuleSpec#context
 * @type string|string[]
 */

/**
 * The priority of the rule.
 *
 * The greater the number, the higher is the priority.
 *
 * The default priority value is <tt>0</tt>.
 *
 * Use a value of <tt>-1</tt> for a weak, or default, configuration —
 * one that is only used if no other "normal" configuration is made.
 *
 * Use a value of <tt>+1</tt> for a strong, or overriding, configuration —
 * one that is used unless another configuration intendedly overrides it,
 * with a greater priority value.
 *
 * @name pentaho.component.ITypeConfigurationRuleSpec#priority
 * @type number
 * @default 0
 */

/**
 * The component type configuration of the rule.
 *
 * @name pentaho.component.ITypeConfigurationRuleSpec#config
 * @type !pentaho.component.ITypeConfigurationSpec
 */

/**
 * Indicates if a component type is enabled.
 *
 * The default value is `true`.
 *
 * @name pentaho.component.ITypeConfigurationSpec#enabled
 * @type boolean|undefined|null
 * @default true
 */

/**
 * A human-readable, localized and short description of the component type.
 *
 * @name pentaho.component.ITypeConfigurationSpec#label
 * @type string
 * @see pentaho.component.ITypeSpec#label
 */

/**
 * A human-readable, localized description of the component type.
 *
 * @name pentaho.component.ITypeConfigurationSpec#description
 * @type string
 * @see pentaho.component.ITypeSpec#description
 */

/**
 * The default property values to use when designing new component instances.
 *
 * @name pentaho.component.ITypeConfigurationSpec#defaults
 * @type Object.<string, pentaho.common.PropertyValue>
 * @see pentaho.component.ITypeSpec#defaults
 */
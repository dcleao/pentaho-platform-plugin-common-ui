<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.pentaho</groupId>
    <artifactId>common-ui-impl</artifactId>
    <version>8.2.0.0-SNAPSHOT</version>
  </parent>

  <artifactId>common-ui-impl-client</artifactId>
  <version>8.2.0.0-SNAPSHOT</version>
  <name>Common UI client side</name>

  <description>This artifact is a temporary container for all client side code that either was produced by pentaho or
    that is a modified external dependency that is included in common-ui. The goal for the future is to have artifacts
    for each of the constituents (e.g. vizapi, prompting) of the current artifact.</description>

  <properties>
    <js.project.list>dojo,dijit,dojo-release,jquery,jquery-i18n-properties,pentaho-cdf-js,angular-mocks,angular,angular-resource,angular-route,angular-animate,angular-aria,angular-cookies,angular-loader,angular-message-format,angular-messages,angular-parse-ext,angular-sanitize,angular-scenario,angular-touch,angular-i18n,angular-translate</js.project.list>
    <build.javascriptReportDirectory>target/js-reports</build.javascriptReportDirectory>
    <docjs.config.file>jsdoc-vizapi.json</docjs.config.file>
    <docjs.config.github.branch>master</docjs.config.github.branch>
    <docjs.config.template.directory>${project.basedir}/src/doc/javascript/template</docjs.config.template.directory>
    <js.build.optimizer>uglify2</js.build.optimizer>
    <requirejs.config.files.pattern>**/*-require-js-cfg.js</requirejs.config.files.pattern>
    <webjars.target.directory>${build.dependenciesDirectory}/META-INF/resources/webjars</webjars.target.directory>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.webjars.bower</groupId>
      <artifactId>dojo</artifactId>
    </dependency>
    <dependency>
      <groupId>org.webjars.bower</groupId>
      <artifactId>dijit</artifactId>
    </dependency>
    <dependency>
      <groupId>org.dojotoolkit.dojo</groupId>
      <artifactId>dojo-release</artifactId>
      <type>zip</type>
      <classifier>src</classifier>
    </dependency>
    <dependency>
      <groupId>org.webjars.npm</groupId>
      <artifactId>jquery</artifactId>
    </dependency>
    <dependency>
      <groupId>org.webjars.bower</groupId>
      <artifactId>jquery-i18n-properties</artifactId>
    </dependency>
    <dependency>
      <groupId>pentaho</groupId>
      <artifactId>pentaho-cdf-js</artifactId>
      <type>zip</type>
    </dependency>
    <dependency>
      <groupId>org.webjars.npm</groupId>
      <artifactId>angular-mocks</artifactId>
    </dependency>
    <dependency>
      <groupId>org.webjars.npm</groupId>
      <artifactId>angular</artifactId>
    </dependency>
    <dependency>
      <groupId>org.webjars.npm</groupId>
      <artifactId>angular-resource</artifactId>
    </dependency>
    <dependency>
      <groupId>org.webjars.npm</groupId>
      <artifactId>angular-route</artifactId>
    </dependency>
    <dependency>
      <groupId>org.webjars.npm</groupId>
      <artifactId>angular-animate</artifactId>
    </dependency>
    <dependency>
      <groupId>org.webjars.npm</groupId>
      <artifactId>angular-aria</artifactId>
    </dependency>
    <dependency>
      <groupId>org.webjars.npm</groupId>
      <artifactId>angular-cookies</artifactId>
    </dependency>
    <dependency>
      <groupId>org.webjars.npm</groupId>
      <artifactId>angular-loader</artifactId>
    </dependency>
    <dependency>
      <groupId>org.webjars.npm</groupId>
      <artifactId>angular-message-format</artifactId>
    </dependency>
    <dependency>
      <groupId>org.webjars.npm</groupId>
      <artifactId>angular-messages</artifactId>
    </dependency>
    <dependency>
      <groupId>org.webjars.npm</groupId>
      <artifactId>angular-parse-ext</artifactId>
    </dependency>
    <dependency>
      <groupId>org.webjars.npm</groupId>
      <artifactId>angular-sanitize</artifactId>
    </dependency>
    <dependency>
      <groupId>org.webjars.npm</groupId>
      <artifactId>angular-scenario</artifactId>
    </dependency>
    <dependency>
      <groupId>org.webjars.npm</groupId>
      <artifactId>angular-touch</artifactId>
    </dependency>
    <dependency>
      <groupId>org.webjars.npm</groupId>
      <artifactId>angular-i18n</artifactId>
    </dependency>
    <dependency>
      <groupId>angular-translate</groupId>
      <artifactId>angular-translate</artifactId>
    </dependency>
  </dependencies>

  <build>
    <testResources>
      <testResource>
        <targetPath>${project.build.directory}</targetPath>
        <filtering>true</filtering>
        <directory>${build.javascriptTestConfigDirectory}</directory>
        <includes>
          <include>*</include>
        </includes>
      </testResource>
    </testResources>
    <plugins>
      <plugin>
        <groupId>com.github.eirslett</groupId>
        <artifactId>frontend-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>javascript-test_npm-install</id>
            <phase>${javascript-test_npm-install-phase}</phase>
            <goals>
              <goal>npm</goal>
            </goals>
            <configuration>
              <arguments>install</arguments>
              <workingDirectory>${frontend-maven-plugin.installDirectory}</workingDirectory>
            </configuration>
          </execution>
          <execution>
            <id>javascript-test_karma</id>
            <phase>${javascript-test_karma-phase}</phase>
            <goals>
              <goal>karma</goal>
            </goals>
            <configuration>
              <karmaConfPath>${project.build.directory}/${karma.file.config}</karmaConfPath>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <!-- need to copy common-ui-require-js-cfg.js to dependencies so it gets processed -->
            <id>copy-own-config-to-dependencies</id>
            <phase>${javascript_unpack-dependencies-phase}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${build.dependenciesDirectory}/common-ui</outputDirectory>
              <resources>
                <resource>
                  <filtering>true</filtering>
                  <directory>${basedir}/src/main/resources-filtered/web</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
          <!--<execution>-->
            <!--<id>javascript-test_copy-resources-filtered</id>-->
            <!--<phase>${javascript-test_copy-resources-phase}</phase>-->
            <!--<goals>-->
              <!--<goal>copy-resources</goal>-->
            <!--</goals>-->
            <!--<configuration>-->
              <!--<outputDirectory>${project.build.directory}/test-javascript</outputDirectory>-->
              <!--<resources>-->
                <!--<resource>-->
                  <!--<filtering>true</filtering>-->
                  <!--<directory>${basedir}/src/main/resources-filtered</directory>-->
                <!--</resource>-->
              <!--</resources>-->
            <!--</configuration>-->
          <!--</execution>-->
          <execution>
            <id>copy-requireCfg-bundles</id>
            <phase>${javascript_unpack-dependencies-phase}</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${build.directory}</outputDirectory>
              <resources>
                <resource>
                  <directory>${basedir}/src/main/config/resources</directory>
                  <includes>
                    <include>requireCfg.bundles.js</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
          <!--<execution>-->
            <!--<id>copy-javascript-resources</id>-->
            <!--<phase>process-resources</phase>-->
            <!--<goals>-->
              <!--<goal>copy-resources</goal>-->
            <!--</goals>-->
            <!--<configuration>-->
              <!--<outputDirectory>${project.build.outputDirectory}</outputDirectory>-->
              <!--<resources>-->
                <!--<resource>-->
                  <!--<directory>${build.javascriptSourceDirectory}</directory>-->
                <!--</resource>-->
              <!--</resources>-->
            <!--</configuration>-->
          <!--</execution>-->
        </executions>
      </plugin>
      <!--<plugin>-->
        <!--<artifactId>maven-dependency-plugin</artifactId>-->
        <!--<executions>-->
          <!--<execution>-->
            <!--<id>javascript-copy-jquery-clean</id>-->
            <!--<phase>${javascript_unpack-dependencies-phase}</phase>-->
            <!--<goals>-->
              <!--<goal>unpack</goal>-->
            <!--</goals>-->
            <!--<configuration>-->
              <!--<artifactItems>-->
                <!--<artifactItem>-->
                  <!--<groupId>org.webjars.npm</groupId>-->
                  <!--<artifactId>jquery</artifactId>-->
                  <!--<version>${jquery.version}</version>-->
                  <!--<outputDirectory>${build.dependenciesDirectory}/jqueryClean</outputDirectory>-->
                  <!--<overWrite>true</overWrite>-->
                <!--</artifactItem>-->
              <!--</artifactItems>-->
            <!--</configuration>-->
          <!--</execution>-->
        <!--</executions>-->
      <!--</plugin>-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <excludes>
            <exclude>web/compressed/build.txt</exclude>
          </excludes>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>${maven-assembly-plugin.version}</version>
        <executions>
          <execution>
            <id>bundle-common-ui-platform-plugin</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <descriptors>
                <descriptor>src/main/assembly/dependencies-js-assembly.xml</descriptor>
              </descriptors>
              <outputDirectory>${project.build.outputDirectory}</outputDirectory>
              <appendAssemblyId>false</appendAssemblyId>
              <finalName>web</finalName>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>

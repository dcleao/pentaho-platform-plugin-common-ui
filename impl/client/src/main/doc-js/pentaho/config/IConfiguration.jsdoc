/*!
 * Copyright 2010 - 2017 Pentaho Corporation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The `config.IService` interface describes a service
 * that manages configurations, usually of types.
 *
 * The [add]{@link pentaho.config.IService#add} method
 * is used to register a [config.spec.IRuleSet]{@link pentaho.config.spec.IRuleSet}
 * to the service.
 *
 * The [getAsync]{@link pentaho.config.IService#getAsync} method
 * gets a filtered configuration for a given environment.
 *
 * From the returned configuration,
 * rules for specific types or instances can be obtained
 * by calling its
 * [selectType]{@link pentaho.config.IConfiguration#selectType} and
 * [selectInstance]{@link pentaho.config.IConfiguration#selectInstance},
 * respectively.
 *
 * Rules that apply to a given type/instance and environment variables are sorted by specificity
 * and then their [specifications]{@link pentaho.config.spec.IRule#apply} are merged.
 * For more information on the specificity of rules,
 * see [config.spec.IRuleSet]{@link pentaho.config.spec.IRuleSet}.
 *
 * Suppose that the following rule set is defined in the system:
 *
 * ```json
 * {
 *   "rules": [
 *     // Disable a still experimental component.
 *     {
 *       "select": {
 *         "type": "my.foo.component"
 *       },
 *       "apply": {
 *         "enabled": false
 *       }
 *     },
 *
 *     // Enable it, only for the dev user, "john", and the "super-app" application.
 *     {
 *       "select": {
 *         "type ":        "my.foo.component",
 *         "user":        "john",
 *         "application": "super-app"
 *       },
 *       "apply": {
 *         "enabled": true
 *       }
 *     }
 *   ]
 * }
 * ```
 *
 * Now, given some implementation of a configuration service,
 * we could use it like in the following example:
 * ```js
 * configService.getAsync({
 *   user:        "john",
 *   application: "not-so-super-app"
 * }).then(function(config) {
 *
 *   var mergedConfigSpec = config.selectType("my.foo.component");
 *
 *   // Results in a configuration specification like:
 *   // {
 *   //   enabled: false
 *   // }
 * });
 * ```
 *
 * @name pentaho.config.IService
 * @interface
 *
 * @see pentaho.config.IConfiguration
 * @see pentaho.config.spec.IRuleSet
 */

/**
 * Obtains a promise for the merged configuration specification of
 * the selection of configuration rules that apply to a given type and environment variables.
 *
 * @name select
 * @memberOf pentaho.config.IService#
 * @method
 *
 * @param {string} typeId - The id of the type whose configuration specification is desired.
 *
 * @param {pentaho.environment.IEnvironment} [environment] The platform environment that is used to select rules.
 *
 * A {@link Nully} variable value is equivalent to a variable that is not present.
 * It matches only configuration rules that do not select that variable.
 *
 * When the map is unspecified,
 * every variable will appear as though it had been specified with a `null` value.
 *
 * Variable values are matched against each value specified by a rule in its selection variables,
 * using JavaScript's strict equality operator, `===`.
 *
 * @return {Promise.<Object>} A promise for the merged configuration specification,
 * if any rule was selected; or `null`, if no rule was selected.
 */

/**
 * Adds a configuration rule set.
 *
 * Added configurations overrides previously added configurations,
 * if all other rule-ordering criteria are equal.
 * For more information on the specificity of rules,
 * see [config.spec.IRuleSet]{@link pentaho.config.spec.IRuleSet}.
 *
 * Note that the specified configuration object **may** be modified to serve
 * the service's internal needs.
 *
 * @name add
 * @memberOf pentaho.config.IService#
 * @method
 *
 * @param {!pentaho.config.spec.IRuleSet} config - A type configuration to add.
 */

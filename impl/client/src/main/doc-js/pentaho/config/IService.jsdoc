/*!
 * Copyright 2010 - 2017 Hitachi Vantara. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The `config.IService` interface describes a service
 * that manages configurations of types and instances
 * for a given environment.
 *
 * It is up to the implementation how the environment it uses to select rules
 * is obtained.
 *
 * The [add]{@link pentaho.config.IService#add} method
 * is used to register a [config.spec.IRuleSet]{@link pentaho.config.spec.IRuleSet}
 * with the service.
 *
 * The configuration of a type or instance can be obtained by calling the
 * [selectType]{@link pentaho.config.IService#selectType} and
 * [selectInstance]{@link pentaho.config.IService#selectInstance},
 * respectively.
 *
 * Rules that apply to a given type/instance and environment variables are sorted by specificity
 * and then their [specifications]{@link pentaho.config.spec.IRule#apply} are merged.
 * For more information on the specificity of rules,
 * see [config.spec.IRuleSet]{@link pentaho.config.spec.IRuleSet}.
 *
 * Suppose that the following rule set is defined in the system:
 *
 * ```json
 * {
 *   "rules": [
 *     // Disable a still experimental component.
 *     {
 *       "select": {
 *         "type": "my.foo.component"
 *       },
 *       "apply": {
 *         "enabled": false
 *       }
 *     },
 *
 *     // Enable it, only for the dev user, "john", and the "super-app" application.
 *     {
 *       "select": {
 *         "type":        "my.foo.component",
 *         "user":        "john",
 *         "application": "super-app"
 *       },
 *       "apply": {
 *         "enabled": true
 *       }
 *     }
 *   ]
 * }
 * ```
 *
 * Additionally,
 * assume that an implementation of a configuration service exists,
 * setup for the environment:
 *
 * ```json
 * {
 *   "user":        "john",
 *   "application": "not-so-super-app"
 * }
 * ```
 *
 * We could use it like in the following example:
 *
 * ```js
 * var mergedConfigSpec = configService.selectType("my.foo.component");
 *
 * // Results in a configuration specification like:
 * // {
 * //   enabled: false
 * // }
 * ```
 *
 * @name pentaho.config.IService
 * @interface
 *
 * @see pentaho.config.spec.IRuleSet
 */

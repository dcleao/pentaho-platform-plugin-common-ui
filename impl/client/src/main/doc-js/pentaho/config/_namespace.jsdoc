/*!
 * Copyright 2010 - 2017 Hitachi Vantara. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The `config` namespace contains the types of the **Pentaho Configuration API**.
 *
 * ## Overview
 *
 * The Configuration API provides a means for _types_ and _instances_ to be configured by third-parties.
 *
 * _Types_ and _instances_ are known by their _string_ identifier and are, for all other purposes, opaque entities
 * — types may or may not exist as actual classes; these may simply represent an interface type.
 *
 * **Configurations** are JavaScript objects that conform to the
 * [IRuleSet]{@link pentaho.config.spec.IRuleSet} interface — essentially, a set of configuration rules,
 * [IRule]{@link pentaho.config.spec.IRule}.
 * Typically,
 * configurations are provided as the value returned by an AMD/RequireJS module.
 * This module needs to be advertised to the configuration system by registering it
 * with [pentaho/instanceInfo]{@link pentaho.instanceInfo},
 * as an instance of type `pentaho.config.spec.IRuleSet`.
 *
 * **Configuration rules** specify the _type_ or _instance_ and the values of any
 * [platform environmental variables]{@link pentaho.environment.IEnvironment}
 * to which they apply,
 * as well as the actual configuration properties that should be applied.
 *
 * Configurations can be obtained through the {@link pentaho.config.IService} interface,
 * an instance of which can be obtained by requiring the
 * AMD/RequireJS module `pentaho/service!pentaho.config.IService?single`. Example:
 *
 * ```js
 * require([
 *   "pentaho/service!pentaho.config.IService?single"
 * ], function(configService) {
 *
 *   // Get the configuration for 'my.IFoo' components:
 *   var myFooConfig = configService.selectType("my.IFoo");
 *   if(myFooConfig !== null) {
 *     // ...
 *   }
 * });
 * ```
 *
 * Alternatively,
 * the configuration for a type or instance module can be obtained by
 * using one of the
 * [pentaho/config/type]{@link pentaho.config.type} or
 * [pentaho/config/instance]{@link pentaho.config.instance} AMD loader plugins.
 * For example, in the module of the `my.Foo` component,
 * it could request its configuration in the following way:
 *
 * ```js
 * define(["pentaho/config/type!"], function(myFooConfig) {
 *
 *   if(myFooConfig !== null) {
 *     // ...
 *   }
 * });
 * ```
 *
 * @name pentaho.config
 * @namespace
 */

// TODO: The configuration system should use typeInfo to accept _aliases_ and allow for _configuration inheritance_.

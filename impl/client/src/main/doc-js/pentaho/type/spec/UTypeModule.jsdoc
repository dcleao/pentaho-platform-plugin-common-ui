/*!
 * Copyright 2017 Pentaho Corporation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The `spec.UTypeModule` type is the union of types that can
 * be the value of the AMD module that defines a Type API named _type_.
 *
 * A module is either the _type_ factory function directly, or
 * an array
 * whose first elements are [dependency references]{@link pentaho.type.spec.UModuleDependencyReference} and
 * whose last element is the type factory function.
 *
 * The _type_ factory function can declare as many arguments as
 * the dependency references that precede it in the module array.
 * The function is called with the values of
 * the [resolved]{@link pentaho.type.Context#getDependency} dependencies.
 *
 * The following is an example of the AMD module of a Type API _type_
 * which is a subtype of [Complex]{@link pentaho.type.Complex} and
 * that depends on all registered instances of its special type `my/SpecialService`.
 *
 * ```js
 * define(function() {
 *
 *   return [
 *     "complex",
 *     {$instance: {type: ["my/SpecialService"]}},
 *     function(Complex, specialServicesList) {
 *
 *       return Complex.extend({
 *         $type: {
 *           // ...
 *         }
 *       });
 *     }
 *   ];
 * });
 * ```
 *
 * @typedef {function|Array.<pentaho.type.spec.UModuleDependencyReference|function>} pentaho.type.spec.UTypeModule
 *
 * @see pentaho.type.spec.UInstanceModule
 */

